<?php

use Illuminate\Support\Facades\Route;
use Illuminate\Http\Request;
use App\Http\Controllers\Api\AuthController;
use App\Http\Controllers\Api\ClientController;
use App\Http\Controllers\Api\TransactionController;
use App\Http\Controllers\Api\SoldeController;
use App\Http\Controllers\Api\UserController;
use App\Http\Controllers\Api\AdminController;
use App\Http\Controllers\Api\ExportController;
use App\Http\Controllers\Api\PdfExportController;
use App\Http\Controllers\Api\NotificationController;

/*
|--------------------------------------------------------------------------
| API Routes
|--------------------------------------------------------------------------
*/

// üîì PUBLIC: Auth
Route::post('/register', [AuthController::class, 'register']);
Route::post('/login', [AuthController::class, 'login']);

// üîê AUTHENTICATED USERS
Route::middleware(['auth:sanctum'])->group(function () {

    // üìå Profile & Logout
    Route::get('/me', [AuthController::class, 'me']);
    Route::post('/logout', [AuthController::class, 'logout']);

    // üìÅ Clients (CRUD)
    // apiResource g√®re : GET /clients (index), POST /clients (store), GET /clients/{id} (show),
    // PUT/PATCH /clients/{id} (update), DELETE /clients/{id} (destroy)
    Route::apiResource('clients', ClientController::class);

    // Route pour l'importation de client par email (renomm√©e la m√©thode dans le contr√¥leur)
    Route::get('/import-client/{email}', [ClientController::class, 'importClient']); // Corrig√©: importClient

    // Route pour les clients d'un revendeur
    Route::get('/mes-clients', [ClientController::class, 'myClients']);

    // Route pour la mise √† jour du statut de paiement
    Route::patch('/clients/{id}/update-statut', [ClientController::class, 'updateStatutPaiement']); // Corrig√©: update-statut

    // üìÑ Transactions (accessible √† tous pour list & show)
    Route::get('/transactions', [TransactionController::class, 'index']);
    Route::get('/transactions/{id}', [TransactionController::class, 'show']);

    // üîî Notifications (accessible √† tous les r√¥les)
    Route::get('/notifications', [NotificationController::class, 'index']);
    Route::get('/notifications/unread', [NotificationController::class, 'unread']);
    Route::get('/notifications/unread/count', [NotificationController::class, 'unreadCount']);
    Route::post('/notifications/{id}/read', [NotificationController::class, 'markAsRead']);
    Route::post('/notifications/read-all', [NotificationController::class, 'markAllAsRead']);

    // üíº REVENDEUR ONLY
    Route::middleware(['isRevendeur'])->group(function () {
        Route::post('/transactions', [TransactionController::class, 'store']);
        Route::get('/solde', [SoldeController::class, 'getSolde']);
        Route::get('/export-pdf/transaction/{id}', [PdfExportController::class, 'export']);
    });

    // üõ†Ô∏è ADMIN ONLY
    Route::middleware(['isAdmin'])->group(function () {
        // ‚ûï Gestion des revendeurs
        Route::post('/register-revendeur', [UserController::class, 'registerRevendeur']);
        Route::get('/revendeurs', [UserController::class, 'indexRevendeurs']);
        Route::put('/revendeurs/{id}', [UserController::class, 'updateRevendeur']);
        Route::delete('/revendeurs/{id}', [UserController::class, 'destroyRevendeur']);

        // üìä Dashboard & Export Excel
        Route::get('/admin/dashboard', [AdminController::class, 'dashboard']);
        Route::get('/export-transactions', [ExportController::class, 'exportTransactions']);
        
        // Route pour valider le paiement final (d√©j√† correcte)
        Route::post('/clients/{id}/valider-paiement', [ClientController::class, 'validerPaiement']);

        // ‚úÖ Validation transaction
        Route::put('/transactions/{id}', [TransactionController::class, 'update']);
        
        // Ces routes sont maintenant g√©r√©es par apiResource ou renomm√©es/supprim√©es
        // Route::post('/register-client', [ClientController::class, 'registerClient']); // Supprim√©e (g√©r√©e par apiResource)
        // Route::get('/external-client/{email}', [ClientController::class, 'getClientFromExternal']); // Supprim√©e (remplac√©e par import-client)
    });
});
